-extends "base.haml"
-load static
-load compress

-block head
  -compress css
    %link{rel: "stylesheet", href: "{% static 'css/new_thread.css' %}" }

-block breadcrumb
  %ol.breadcrumb
    %li
      %a{href: "/forum"} Forum
    %li.active
      %a{href: "/forum/write"} Create

-block content
  .panel.panel-primary#main-panel
    .panel-heading.carot
      %span.glyphicon.glyphicon-plus
      Créer un nouveau Sujet
    .panel-body

      %form{:action => '/forum/write/', :method => 'post'} {% csrf_token %}
        %div
          %label{:for => 'title'} Titre
          - for err in errors
            {% if err.field == 'title' %}
              .alert.alert-danger{ :role => 'alert'}
                %span.glyphicon.glyphicon-exclamation-sign{ :aria-hidden =>'true'}
                %span Erreur: #{err.msg}
            {% endif %}
          %input.form-control#title-tf{:type => 'text', :name => 'title', :value => "#{data.title}" }

          #radiobtns
            %span.radio
              %label
                  %input#pvt-vis{'type':'radio', 'name':'visibility', 'value':'private', 'checked': true } Privé
            %span.radio
                %label
                    %input#class-vis{:type => 'radio', :value => 'class', :name => 'visibility'} Classe
            %span.radio
                %label
                    %input#public-vis{:type => 'radio', :value => 'public', :name => 'visibility'} Public

          %div#visibdata
            %label#visibdatalabel{:for => 'visibdata'} Destinataire
            - for err in errors
              {% if err.field == 'visibdata' %}
                    .alert.alert-danger{ :role => 'alert'}
                      %span.glyphicon.glyphicon-exclamation-sign{ :aria-hidden =>'true'}
                      %span Erreur: #{err.msg}
              {% endif %}

            %select#select-visibility.form-control{:name => 'visibdata'}
                %option{:value => "#{user.id}", :selected}= user.username


          %div
            %label{:for => 'skills'} Compétences
            - for err in errors
              {% if err.field == 'skills' %}
                    .alert.alert-danger{ :role => 'alert'}
                      %span.glyphicon.glyphicon-exclamation-sign{ :aria-hidden =>'true'}
                      %span Erreur: #{err.msg}
              {% endif %}
            %select.form-control#skills-select{:name => 'skills', :multiple => 'true', :size => 6}
              - for skill in data.skills
                -if skill|is_selected_multiple:data.selected_skills
                  %option{:value => "#{skill.id}", :selected}
                    %span= skill.code
                    %span= skill.name
                -else
                  %option{:value => "#{skill.id}"}
                    %span= skill.code
                    %span= skill.name

            %label{:for => 'section'} UAA
            %select.form-control#section-select{:name => 'section'}
              %option{:value => ""} Sélectionnez une UAA (optionel)
              - for section in data.sections
                -if section|is_selected_multiple:data.selected_sections
                  %option{:value => "#{section.id}", :selected}
                    %span= section.name
                -else
                  %option{:value => "#{section.id}"}
                    %span= section.name
          %div
            %label{:for => 'resource'} Ressource
            %select.form-control#resources-select{:name => 'resources', :size => 1}
                -if data.selected_resource is None
                  %option{:value => "", :selected} Sélectionnez une resource (optionel)
                -if data.selected_resource is not None
                  %option{:value => ""} Sélectionnez une resource (optionel)
                - for resource in data.resources
                  -if resource.id|is_selected_single:data.selected_resource
                    %option{:value => "#{resource.id}", :selected}
                      %span= resource.title
                  -else
                    %option{:value => "#{resource.id}"}
                      %span= resource.title

          %div
            %label{:for => 'content'} Message
            - for err in errors
              {% if err.field == 'content' %}
                    .alert.alert-danger{ :role => 'alert'}
                      %span.glyphicon.glyphicon-exclamation-sign{ :aria-hidden =>'true'}
                      %span Erreur: #{err.msg}
              {% endif %}
            %textarea.form-control#content{:rows => '8', :name => 'content'} #{data.content}

          .pull-right
            %button.btn.btn-lg.pull-right.carot#validb{:type => 'submit', :value => 'Submit'} Valider




-block javascript
  :javascript
    $(document).ready( function() {
      var visibility = "{{data.visibility}}";
      var selectedVisibdata = "{{data.visibdata|escapejs}}";

      var $visibilitySelect = $('#select-visibility');

      var lessons = []
      var professors = []
      var users = []
      var resources = []

      switch(visibility)
      {
        case 'private':
          $('#pvt-vis').attr('checked', true)
          break;
        case 'class':
          $('#class-vis').attr('checked', true)
          break;
        case 'public':
          $('#public-vis').attr('checked', true)
          break;
        default:
          $('#pvt-vis').attr('checked', true)
          break;
      }

      function fetchUsers (callback) {
        if (users.length > 0) {
          callback(users);
        }
        else {
          $.getJSON('/forum/write/users', function (result) {
            users = result.data
            callback(users)
          })
        }


      }

      function fetchProfessors (callback) {
        if (professors.length > 0) {
          callback(professors);
        }
        else {
          $.getJSON('/forum/write/professors', function (result) {
            professors = result.data
            callback(professors)
          })
        }

      }

      function fetchLessons (callback) {
        if (lessons.length > 0) {
          callback(lessons);
        }
        else {
          $.getJSON('/forum/write/lessons', function (result) {
            lessons = result.data
            callback(lessons)
          })
        }
      }

      function fetchResources (skills, section, callback) {
        var params = {"skills[]": skills, "section": section};
        console.log(params);
        $.getJSON('/forum/write/resources/', params, function (result) {
          resources = result.data;
          callback(resources);
        })
      }

      function getDisplayName(value) {
        if (value.first_name && value.first_name.length > 0 && value.last_name && value.last_name.length > 0) {
          return value.first_name + ' ' + value.last_name
        }

        return value.username
      }

      function scrollToFirstSkill() {
        var $skillsSelect = $("#skills-select")
        var $skillsSelected = $("#skills-select :selected");
        if ($skillsSelected.length) {
          var $firstSelected = $($skillsSelected.get(0));
          $skillsSelect.scrollTop($skillsSelect.scrollTop() + ($firstSelected.offset().top - $skillsSelect.offset().top));
        }
      }

      var changeLab = function () {

        if ($("#public-vis").is(":checked")) {
          $(visibdatalabel).text("Professeur")
          $visibilitySelect.empty()
          fetchProfessors(function (result) {
            for (var i = 0; i < result.length; ++i) {
              var value = result[i]

              $visibilitySelect.append($("<option />")
                .val(value.id)
                .attr("selected", visibility === 'public' && value.id == selectedVisibdata)
                .text(getDisplayName(value)))
            }
          })
        } else if ($("#pvt-vis").is(":checked")) {
          $(visibdatalabel).text("Destinataire")
          $visibilitySelect.empty()
          fetchUsers(function (result) {
            for (var i = 0; i < result.length; ++i) {
              var value = result[i]

              $visibilitySelect.append($("<option />")
                .val(value.id)
                .attr("selected", visibility === 'private' && value.id == selectedVisibdata)
                .text(getDisplayName(value)))
            }
          })
        } else if ($("#class-vis").is(":checked")) {
            $(visibdatalabel).text("Classe")
            $visibilitySelect.empty()
            fetchLessons(function (result) {
              for (var i = 0; i < result.length; ++i) {
                var value = result[i]
                $visibilitySelect.append($("<option />")
                  .val(value.id)
                  .attr("selected", visibility === 'class' && value.id === selectedVisibdata)
                  .text(value.name))
              }
            })
        }



      }

      changeLab();

      scrollToFirstSkill();

      $("#radiobtns").click(function() {
        changeLab()
      });

      $("#skills-select, #section-select").change(function(e) {
        var selectedResId = "{{data.selected_resource|escapejs}}";
        var selectedSkills = $('#skills-select').val();
        var selectedSection = $('#section-select').val();
        var $resourcesSelect = $('#resources-select');

        fetchResources(selectedSkills, selectedSection, function(result) {
          $resourcesSelect.find('option').not(':first').remove();
          for (var i = 0; i < result.length; ++i) {
              var value = result[i];
              var $newOption = $("<option />")
                .val(value.id)
                .text(value.title)
                .attr("selected", value.id === selectedResId);
              $resourcesSelect.append($newOption)
            }
        })
      })
    })
